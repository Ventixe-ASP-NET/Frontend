@model WebApp.Views.Bookings.BookingModels.CreateBookingViewModel
@{
    ViewData["Title"] = "Create Booking";
}
@section Styles {
    <link rel="stylesheet" href="~/css/booking.css" asp-append-version="true" />
}

<div class="create-booking-wrapper">
    <div class="create-top">
        <div class="filter-container">
            <div class="search-box">
                <input type="text" id="eventSearch" placeholder="Search..." />
            </div>
            <div class="category-box">
                <select id="categoryFilter">
                    <option value="">All categories</option>
                    @foreach (var category in Model.EventData
                    .Where(e => e.Category != null)
                    .Select(e => e.Category.CategoryName)
                    .Distinct())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="create-middle">
        @foreach (var ev in Model.EventData)
        {
            <div class="event-card" data-title="@ev.EventName.ToLower()" data-category="@ev.Category?.CategoryName.ToLower()">
            <div class="event-left">
                <div class="event-category">@ev.Category?.CategoryName</div>
                <div class="event-title">@ev.EventName</div>
                <div class="event-description">@ev.Description</div>
            </div>

                <div class="event-meta">
                    <div class="event-location">@ev.Location?.VenueName, @ev.Location?.City</div>
                    <div class="event-date">@ev.StartDate.ToString("yyyy-MM-dd HH:mm") → @ev.EndDate.ToString("yyyy-MM-dd HH:mm")</div>
                    <div class="event-total-tickets">@ev.TicketTypes.Sum(t => t.TicketsLeft) tickets left</div>
                </div>

                <div class="event-ticket-info">
                    <div class="event-price">
                        @if (ev.TicketTypes.Any())
                        {
                            <span>$@ev.TicketTypes.Min(t => t.Price.ToString("0.00"))</span>
                        }
                    </div>
                    <button class="book-now-btn">Book Now</button>
                </div>

                <div class="booking-form" style="display: none;" data-event-id="@ev.Id">
                    <select class="ticket-type-dropdown">
                        <option value="">-- Select Ticket Type --</option>
                        @foreach (var ticket in ev.TicketTypes)
                        {
                            <option value="@ticket.Id"
                                    data-name="@ticket.TicketType"
                                    data-left="@ticket.TicketsLeft"
                                    data-price="@ticket.Price.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)">
                                @ticket.TicketType – $@ticket.Price (@ticket.TicketsLeft left)
                            </option>
                        }
                    </select>

                    <input type="number" class="ticket-amount" placeholder="Amount" min="1" />
                    <button class="submit-booking-btn">Confirm Booking</button>
                    <div class="booking-error" style="color:red; font-size: 12px;"></div>
                </div>
        </div>
        }

    </div>
    <div class="create-bottom"></div>
</div>


@section Scripts {
    <script>
        const searchInput = document.getElementById('eventSearch');
        const categorySelect = document.getElementById('categoryFilter');
        const eventCards = document.querySelectorAll('.event-card');

        function filterEvents() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedCategory = categorySelect.value.toLowerCase();

            eventCards.forEach(card => {
                const title = card.getAttribute('data-title');
                const category = card.getAttribute('data-category');

                const matchesTitle = title.includes(searchTerm);
                const matchesCategory = selectedCategory === "" || category === selectedCategory;

                if (matchesTitle && matchesCategory) {
                    card.style.display = 'flex';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Kör vid input eller ändrad kategori
        searchInput.addEventListener('input', filterEvents);
        categorySelect.addEventListener('change', filterEvents);

        // Init-filter vid page load (om något är förifyllt)
        document.addEventListener('DOMContentLoaded', filterEvents);

            document.querySelectorAll('.book-now-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const form = btn.closest('.event-card').querySelector('.booking-form');
                form.style.display = form.style.display === 'none' ? 'block' : 'none';
            });
        });

            document.querySelectorAll('.submit-booking-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const form = btn.closest('.booking-form');
                const eventId = form.getAttribute('data-event-id');
                const ticketSelect = form.querySelector('.ticket-type-dropdown');
                const quantityInput = form.querySelector('.ticket-amount');
                const errorEl = form.querySelector('.booking-error');

                const selectedOption = ticketSelect.options[ticketSelect.selectedIndex];
                const ticketTypeId = ticketSelect.value;
                const ticketTypeName = selectedOption.dataset.name;
                const ticketsLeft = parseInt(selectedOption.dataset.left);
                const price = Number(selectedOption.dataset.price);
                const quantity = parseInt(quantityInput.value);

                errorEl.textContent = "";

                if (!ticketTypeId || isNaN(quantity) || quantity < 1) {
                    errorEl.textContent = "Please select a ticket type and quantity.";
                    return;
                }

                if (quantity > ticketsLeft) {
                    errorEl.textContent = "Not enough tickets left.";
                    return;
                }

                const payload = {
                    invoiceId: "INV10011",
                    bookingName: "User123",
                    createdAt: new Date().toISOString(),
                    eventId: eventId,
                    tickets: [
                        {
                            ticketTypeId: ticketTypeId,
                            ticketType: ticketTypeName,
                            quantity: quantity,
                            pricePerTicket: price
                        }
                    ]
                };

            try {
            console.log("Booking Payload:", payload);

            const res = await fetch('https://bookingserviceventixe-fbb7amdzfsh4b4d6.swedencentral-01.azurewebsites.net/api/bookings', {
                method: 'POST', // eller PUT om du vill
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const resultText = await res.text(); // få meddelande även om det inte är JSON

            if (!res.ok) {
                console.error("API Error:", resultText);
                errorEl.textContent = `API Error: ${resultText}`;
                return;
            }

            alert("Booking successful!");
            form.style.display = "none";
            quantityInput.value = "";
            ticketSelect.selectedIndex = 0;

        } catch (err) {
            console.error("Network Error:", err);
            errorEl.textContent = "Could not reach API. Check network or CORS.";
        }
            });
        });
    </script>
}